1. Data Access
	a. ADO.NET
	b. EF 
2. UI
	asp.net mvc
		- web page based app

3. API
	asp.net mvc
		- restful apis

asp.net
	- web page applications
	- web service applications

Resource - data
page - get the data

Model - View -* (controller/presenter/view-model)
Model-View-Controller architecture


global events (application specific)
page-related events (home page)
other control events (button)

class Home:Controller
{
   public ViewResult Products(string id)
   {
	//fetching data from db 
        // pass it to a View (cshtml)
        return this.View();
   }
}

send to View engine (ASP.NET/Razor view engine) cshtml-->html

system.web.dll

system.web
system.web.mvc

asp.net core:
	- is NOT a continuation of ASP.NET 4.x framework
	- it is a re-write of ASP.NET 4.x framework
	- completely new framework
	- modular, smaller
	- open source (https://github.com/aspnet)
	- high-performance
	- crosss-platform
	- cloud
	- web app (page), API, IoT, mobile app
	- on-premise

asp.net MVC core:
	- at the top of asp.net core, MVC framework has been added


hosting:
	a. in -process hosting (1 web server - iisexpress/kestrel)
	b. out-of-process hosting


hostbuilder:
	a. sets up the web server
	b. loads the host and app configs from different configuration files
	c. configuration and logging


Kestrel:
	cross-platform web server
	internet facing web server (edge server)

out of process
	: 2 web servers (internal web server: Kestrel + external web server - IIS, Apache Tomcat, NgInx)

services.AddMvc()

services.AddControllerWithViews() (MVC web application with view)
services.AddController() (web api type application - NO VIEW, ONLY MODEL and CONTROLLER)
services.AddRazorPages() (Web page based application)

sqlexception ex = new sqlexception("");

DbContext:
	a. Manage Db connection
	b. Configure Models and relationship between them
	c. query the database
	d. save the data in db
	e. configure change tracking
	f. caching
	g. transcations

extra:
anonymous type (3.0)
extension method technique (3.0)






