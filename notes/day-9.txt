Recap:
1. JS and execution cycle
2. JS features (new)
	a. let , const keywords
	b. spread and rest operator
	c. object destructuring
	d. class, constructor, super, exetends keywords
	e. string template/interpolation (`${}`)
	f. arrow function

3. JS features (regular)
	a. array
	b. var keyword
	c. variable and function hoisting
	d. object creation
		i. object literal syntax
		ii. constructor function and new keyword
		iii. class and new keyword
	e. objects characterestics: iterable, properties can be accessed through []
	f. proto property of object
	g. prototype object for a function & prototype property of the function to access the object
	h. callback mechanism


1. modules in JS/TS etc.
	module: a file with exportable members
	module format: 
	a. Common JS [default format to define modules in Node JS]
	b. AMD (asynchronous module definition)
		define([],function(){
                })
		require([])
	c. UMD (Universal module definition)
	d. ES6 

	module loader:
	a. common js loader (Node runtime has this by default)
	b. require js (can be use in browser and node)
	c. systemjs

1. module should be converted to AMD format to be understood by requirejs
2. all latest JS features to be converted to old version of JS (<ES6)

code transpilation: [converting latest JS codes in lower version (<ES6), such as ES2, 3]
transpiler: 
a. babel: 
	core packages: @babel/core, @babel/cli
	install: >npm i @babel/core @babel/cli -D

	presets:
	@babel/preset-env: for ES2015+ syntax transformation
	install: >npm i @babel/preset-env -D

	plugins: ES6 module format to AMD format conversion
	@babel/plugin-transform-modules-amd
	install: > npm i @babel/plugin-transform-modules-amd -D

b. tsc


2. typescript
	a. superset of javascript
	b. typification
	c. compile time type checking

let x:number=20;
function add(a:number, b:number):number{
	return (a+b)
}

add(12,"joy");

interface IA{}

3. asynchronous and promise (node js/browser async), async and wait
4. application and tools

SPA
---------------------------
single HTML and many partial HTML file with inly content and TS/JS files with event handling or other codes related to that file

components:

client-side framework:
Angular

client-side library:
React

webapck, browserify: bundler


Angular:
a. create SPA
b. components are the building (view[partial html]+code[ts/js]) blocks
c. routing feature
d. mechanism to pass data between view and code: declarative programming style (data and event binding)
e. mvc architecture 
f. reusable piece of code (service) and get the object of the service dependency injected
g. offers nice DI system
h. piping mechanism: pipes (transformers)
i. write code and then segregate them in logical modules

angular cli tool: ng
installation: > npm i @angular/cli -g

build, serve: either prod bundle or dev bundle is created by webpack
serve: after dev bundle is created, webpack-dev-server is used as dev server
test: karma tool
	

angular components:
a. routed components
b. nested components

data binding: some proerty in the class is bound to some control in view
code --> view
syntax: interpolation=> {{ <property-name> }}
        property binding <tag-name [html-att-name]='<prop-name>'></tag-name>

view --> code
event binding
<tag-name (event-name)='methodName(arg)'></tag-name>

attributes: class

[TestClassAttribute]
class A
{
	[TestMethodAttribute]
	public void Test1()
	{
	}
}


class TestClassAttribute
{
}

