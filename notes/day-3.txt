1. Recap
2. OOP (remaining)
3. exceptions
4. Object class
5. collections and generics
6. delegates
7. files
8. serialization
9. asynchrnous
10. new features
11. LINQ

1. .NET Framework
2. .NET Core
3. .NET and .NET Standard
4. Creatig a simple app in both .NET Framework and .NET
5. execution cycle of a .NET application
6. library and executable app
7. IL code
8. ILDASM
9. Basics



					Data Types
--------------------------------------------------------------------------------------------
	Value type					Reference Type
----------------------------------------------------------------------------------------------
built-in		user-defined		built-in		user-defined
----------------------------------------------------------------------------------------------
byte			struct			string			class
sbyte			enum			object			interface
short									delegate
ushort									event
int
uint
long
ulong

float float f = 12.34F;
decimal decimal d = 12.34M;
double double d1 = 12.34D;

char
bool

DatetTime
TimeSpan

Operators:
-------------------------

control flow statements:
----------------------------------


static:
a. static data member: a shared data member, whose memory space is not part of any object, rather is part of Heap memory and every object of that clas has access to this static data

b. static property: a property which sets or gets or both a static data

c. static method: a method which can operate on a static data
d. static constructor: 
	i. a constructor in a class declared with static keyword
	ii. used to assign value ONLY to static members of the class
	iii. is not declared with any access specifier
	iv. it is not called by anyone while creating the object of the class, rather called implicitly by runtime, 
		- when the very first time an object is created or 
		- any static member of the class is accessed
	v. can not be overloaded
	vi. called only one time in the application life-time

e. static class:
	- class declared with static keyword
	- no instance of the class is created (since there will be no public constructor)
	- contains only static members (static data/method/constructor/property)
	- used as utility class, when you frequently use members of the class and do not want to create object of the class everytime you access it's members
	- ex: Console, Convert class

class A
{
	static A(){ x= 20;}
	static int x=20;
	public static int X {set=>x=value; get=>x;}
	public static UseX(){//access x}
}







