1. Array
2. params keyword
3. OOP
	a. class, object
	b. constructor
	c. members
	d. access specifiers
	e. inheritance
	f. base and this keyword
	g. polymorphism - static and dynamic
	h. static, readonly, const, sealed
	i. interface
4. exceptions
5. generics and collections

//library
namespace FibonacciLibrary
{
	public class Fibonacci
	{
		public int GetFibonacci(int number)
		{
  			if(number>=0)
			{
				//code
			}
			else
				throw new Exception("number should be greater than or equal to zero");
		}
	}
}

//unit test case (add ref to fibo lib)
namespace FibonacciTestLibrary
{
	[TestClass]
	public class FibonacciTest
	{
		[TestMethod]
		public voud GetFibonacciTestWithPositiveValue()
		{
			Fibonacci fb = new Fibonacci();
			int actual = fb.GetFibonacci(6);
			Assert.AreEqaul(actual,8);
		}
		[TestMethod]
		public voud GetFibonacciTestWithZeroValue()
		{
			Fibonacci fb = new Fibonacci();
			int actual = fb.GetFibonacci(0);
			Assert.AreEqaul(actual,0);
		}
		[TestMethod]
		[ExpectedException(typeof(Exception))]
		public voud GetFibonacciTestWithNegativeValue()
		{
			Fibonacci fb = new Fibonacci();
			fb.GetFibonacci(-1);			
		}
	}
}

//console app: add reference to the fibo library
class Program
{
	static int GetANumber()
	{
   		cw("enter  number: ");
   		int number = int.Parse(Console.ReadLine());
   		return number;
	}
	static void Main()
	{
   		int number = GetANumber();
		Fibonacci fb = new Fibonacci();
   		int result = fb.GetFibonacci(number)
   		cw(result);
	}
}


class Employee
{
   public string Name{set;get;}
}

class Program
{
  Main()
  {
    employee e1 = new Employee { Name = ''};
  }
}

class User
{
   
}

class: (blue print)
 - data members
 - functionalities

class access specifiers:
public, internal (default)

class members access specifiers:
public, private (default), protected, internal, protected internal

purpose of OOP:
 - data abstraction
 - implementational abstraction

constructor:
	- initialize data members of the class
		- default  - default values (string->null, numbers->0, boolean -> false)
		- parameterized - user values

property:
 - a way to encapsulate data member
 - property function 
 - accessed like any 'public' data member
 - collection of maximum two functions inside (shorthand notaion set, get)
 - set accessor and get accessor
 - a property at a time can have any one or both acessors
 - property having only set accessor: write-only
 - property having only get accessor: read-only

C# 3.0:
auto-implemented properties/automatic properties
Object-Initializer technique

Inside class:
 - data members
 - constructors
 - properties
 - methods


inheritance:
	 - acquiring/inheriting members of one type into another type
	 - reusability
	 - constructors are not inherited from one class to another
	 - private members of one class are inherited into the child class, but they are not visible/accessible in the child class
	 - in order to make the private members visible/accessible in the child class use "protected" access speicifier with the base class members

constructor execution sequence:
	 - when you create object of a child class, base class's default constructor gets invoked (when you call child class's constructor)
	 - from child class's constructor you can also explicitly call base class's parameterized constructor, using "base" keyword

 class A
    {
        int m;

        public A() { }

        public A(int j)
        {
            this.m = j;
        }
        
    }
    class B : A
    {
        int n;

        public B()
        {

        }
        public B(int x, int y) : base(x)
        {
            this.n = y;
        }
    }

B obj = new B(10,20);

Polymorphism:

compile-time/static polymorphism:
Note: it is about a single class
a. method overloading:
1. number of arguments
2. data type of arguments
3. position of data arguments

b. operator overloading:
type of operands decide the operation

dynamic polymorphism:
Note: it invloves more than one (at least two - a parent and a child class)

			Person
			virtual Cut()

HairStylist		FilmDirector		Butcher
override Cut(){//code}	override Cut(){//code}	override Cut(){//code}

choice =1, 2, 3

Person person = null;
switch(choice)
{
	case 1:
	person = new HairStylist();
	break;

	case 2:
	person = new FilmDirector();
	break;

	case 3:
	person = new Butcher();
	break;
}

person.Cut();

class Control
{
	virtual ReSize(){//default code}
}

class TextBox:Control
{
	override ReSize(){//code}
}

class DropDownList:Control
{
	override ReSize(){//code}
}


Control control= null;
switch(choice)
{
	case 1:
	control= new TextBox();
	break;

	case 2:
	control= new DropDownList();
	break;

}

control.ReSize()












